---
import Layout from './Default.astro';
import BlogSideBar from '@components/blog/BlogSideBar.astro';
import BlogContent from '@components/blog/BlogContent.astro';
import RecentBlogPosts from '@components/generic/RecentBlogPosts.astro';
import Pill from '@components/custom/Pill.astro';
import Card from '@components/custom/Card.astro';
import GalleryCard from '@components/custom/GalleryCard.astro';
import Button from '@components/custom/Button.astro';
import { getEntryBySlug } from 'astro:content';

const { content, headings } = Astro.props;
const { title, description, imgUrl, tags, draft, pubDate, author, layout, galleryUrl } = content;
const ogImage = new URL(`/v1/generate/og/${Astro.params.slug}.png`, Astro.url);

// Get the entry by slug
const entry = await getEntryBySlug('blog', Astro.params.slug);

// Get the image URL from the entry
const entryImgUrl = entry.data.imgUrl;
console.log(entryImgUrl);

// Get the gallery URLs from the entry
// For each gallery URL, we need to get the image URL
const galleryUrls = entry.data.galleryUrls;
console.log(galleryUrls);
---

<Layout
  title={title as string}
  description={description as string}
  ogImage={ogImage}
>
  <!-- <main class='p-6 lg:grid flex justify-center'> -->
    <!-- <BlogSideBar headings={headings} /> -->
    <!-- <BlogContent content={content}> -->
      <!-- <slot /> -->
      <!-- <SummaryCard
        title={title}
        imgAlt={title}
        imgSrc={entryImgUrl}
        description={description}
      >
        <p>Published on: {pubDate}</p>
        <p>Author: {author}</p>
        <div class='sm:inline-block'>
          <p class='poppins mt-2'>Tags:</p>
          <div class='flex justify-between items-center'>
            <ul class='flex flex-wrap gap-4 mt-2'>
              {tags.map((tag: string) => (
                <li>
                  <a class="sanchez" href={import.meta.env.BASE_URL + `/blog/tags/${tag.toLowerCase()}/`}>
                    <Pill>{tag}</Pill>
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </div>
        <p>Layout: {layout}</p>
        <p>Gallery: {galleryUrls && galleryUrls.length > 0 ? 'Yes' : 'No'}</p>
        <p>tags: {tags}</p>
      </SummaryCard> -->


      <!-- <ul class="grid gap-5 grid-cols-[repeat(auto-fit, minmax(350px, 1fr))]">
        {galleryUrls.map((galleryUrl: string) => (
          <li key={galleryUrl}>
            <SummaryCard
              title=""
              imgAlt=""
              imgSrc={galleryUrl}
              description=""
            />
          </li>
        ))} -->

        <div class="parent-class bg-pattern grid gap-5 p-6">
            <Card>
              <div class="button-container flex flex-wrap items-center">
                <div onclick='window.history.back()', class="mr-4 md:mr-6 lg:mr-7">
                <Button>
                  &LeftArrow; Go back
                </Button>
                </div>
                <h2 class='texto-chulo text-3xl md:text-4xl lg:text-6xl dm-serif mb-0 mt-0'>
                  {title}
                </h2>
              </div>
              
            </Card>
          {galleryUrls && galleryUrls.length > 0 && (
            <div class="gallery-class">
              <ul class="grid gap-5 grid-cols-[repeat(auto-fit, minmax(350px, 1fr))] lg:grid flex justify-center">
                {galleryUrls.map((galleryUrl: string) => {
                  const pathParts = galleryUrl.fsPath.split('/');
                  const altText = pathParts.slice(-2).join('/');
                  console.log(altText);
                  return (
                    <li key={galleryUrl}>
                      <GalleryCard
                        imgAlt={altText}
                        imgSrc={galleryUrl}
                        description=""
                      />
                    </li>
                  );
                })}
              </ul>
            </div>
          )}
        </div>
      
<style>

  /* Default styles for texto-chulo */
  .texto-chulo {
    /* Any other styles you might need */
    margin-top: 10px; /* Default margin */
    margin-left: 0px;
  }

  /* Styles when texto-chulo is wrapped */
  .texto-chulo.wrapped {
    margin-top: 0px; /* Add margin when wrapped */
  }

  ul {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(max(250px, 15%), 1fr));
  }
  
  /* Adjust gap and column min-width for different screen sizes */
  @media (min-width: 768px) {
    ul {
      grid-template-columns: repeat(auto-fit, minmax(max(275px, 15%), 1fr));
    }
  }

  @media (min-width: 1024px) {
    ul {
      grid-template-columns: repeat(auto-fit, minmax(max(300px, 15%), 1fr));
    }
  }

  li {
    list-style: none;
  }

  :global(body) {
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    box-sizing: border-box;
  }

  :global(#root) {
    flex: 1;
  }

  .bg-pattern {
    background: repeating-linear-gradient(
      45deg,
      #F4F0D9,
      #F4F0D9 20px,
      #1b3c4f 20px,
      #1b3c4f 40px,
      #a95548 40px,
      #a95548 60px,
      #579763 60px,
      #579763 80px
    );
    background-size: 113.1px 113.1px;
    animation: moveBackground 6s linear infinite;
  }

  @keyframes moveBackground {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: -113.1px 0;
    }
  }

  main {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  }
</style>


